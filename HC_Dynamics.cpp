#include "HC_Header.h"
#include <string>
#include <math.h>
#include <iostream>
#include <time.h>
#include <cmath>
#include <stdlib.h>     /* srand, rand */
#include <dlib/matrix.h>
#include <dlib/optimization.h>

using namespace std;

extern double pi;

Stateddot Pre_Impact_EOM(RobotState Pre_Impact_State, double u_alpha, double u_beta)
{
	// This is the pre-impact system dynamics
	double Theta = Pre_Impact_State.theta;
	double Alpha = Pre_Impact_State.alpha;
	double Beta = Pre_Impact_State.beta;
	double Thetadot = Pre_Impact_State.thetadot;
	double Alphadot = Pre_Impact_State.alphadot;
	double Betadot = Pre_Impact_State.betadot;

	// The acceleration of the state variable is calculated with the MATLAB symbolic expression

	Stateddot xddot;
	xddot.thetaddot = -(u_alpha*-2.823393136590067E63 + cos(Beta*2.0 - Theta)*1.83079115265863E60 + cos(Alpha*2.0 + Beta*2.0 + Theta)*6.057730169504523E61 - cos(Theta)*2.129573398670229E63 + cos(Alpha*2.0 + Theta)*2.677469254650795E61 + cos(Beta*2.0 + Theta)*1.83079115265863E60 - u_beta*cos(Alpha + Beta)*5.084692964311805E63 + (Thetadot*Thetadot)*sin(Alpha*2.0)*3.411658071675326E59 + (Thetadot*Thetadot)*sin(Alpha*2.0 + Beta*2.0)*7.718820297533796E59 + (Alphadot*Alphadot)*sin(Alpha + Beta)*8.578256721040277E59 + (Betadot*Betadot)*sin(Alpha + Beta)*8.578256721040277E59 + (Thetadot*Thetadot)*sin(Alpha + Beta)*8.578256721040277E59 + u_alpha*cos(Alpha)*2.634561311518179E62 - u_beta*cos(Alpha)*2.634561311518179E62 - u_alpha*cos(Alpha + Beta*2.0)*1.636881833810611E61 + u_beta*cos(Alpha - Beta)*1.446479738901761E62 + u_beta*cos(Alpha + Beta*2.0)*1.636881833810611E61 - (Alphadot*Alphadot)*sin(Alpha)*7.339232814600798E60 + (Alphadot*Alphadot)*sin(Alpha - Beta)*2.162013987119978E58 - (Alphadot*Alphadot)*sin(Alpha + Beta*2.0)*4.322539366618926E59 + (Betadot*Betadot)*sin(Alpha - Beta)*2.162013987119978E58 - (Thetadot*Thetadot)*sin(Alpha)*7.339232814600798E60 + (Thetadot*Thetadot)*sin(Alpha - Beta)*2.162013987119978E58 - (Thetadot*Thetadot)*sin(Alpha + Beta*2.0)*4.322539366618926E59 + u_alpha*cos(Beta*2.0)*9.166538269339423E60 + Alphadot*Betadot*sin(Alpha + Beta)*1.715651344208055E60 + Alphadot*Thetadot*sin(Alpha + Beta)*1.715651344208055E60 + Betadot*Thetadot*sin(Alpha + Beta)*1.715651344208055E60 + Alphadot*Betadot*sin(Alpha - Beta)*4.324027974239956E58 - Alphadot*Thetadot*sin(Alpha)*1.46784656292016E61 + Alphadot*Thetadot*sin(Alpha - Beta)*4.324027974239956E58 - Alphadot*Thetadot*sin(Alpha + Beta*2.0)*8.645078733237851E59 + Betadot*Thetadot*sin(Alpha - Beta)*4.324027974239956E58) / (cos(Alpha*2.0)*3.411658071675326E59 + cos(Beta*2.0)*4.525240364155658E58 + cos(Alpha*2.0 + Beta*2.0)*7.718820297533796E59 - 2.670283785648668E61);
	xddot.alphaddot = ((u_beta - cos(Alpha + Beta + Theta)*2.4525E-2 - (Thetadot*Thetadot)*sin(Alpha + Beta)*3.125E-4 + (Alphadot*Alphadot)*sin(Beta)*1.75E-4 + (Thetadot*Thetadot)*sin(Beta)*1.75E-4 + Alphadot*Thetadot*sin(Beta)*3.5E-4)*(cos(Alpha + Beta)*2.322293885282703E41 + cos(Alpha)*1.24267240715314E40 + cos(Beta)*4.590862064203024E40 - cos(Alpha + Beta)*cos(Alpha)*2.294164443975028E40 - cos(Alpha + Beta)*cos(Beta)*1.453843120389752E39 + pow(cos(Alpha + Beta), 2.0)*2.596148429267414E39 - cos(Alpha)*cos(Beta)*1.284732088626016E40 - 4.440565984720187E40)*-9.007199254740992E20) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60) - ((cos(Alpha)*1.24267240715314E41 + pow(cos(Beta), 2.0)*4.070760737091305E39 - cos(Alpha + Beta)*cos(Beta)*1.453843120389752E40 + pow(cos(Alpha + Beta), 2.0)*1.298074214633707E40 - 8.509828931667414E41)*(-u_alpha - cos(Alpha + Theta)*2.1672252E-1 + cos(Alpha + Beta + Theta)*2.4525E-2 + (Thetadot*Thetadot)*sin(Alpha + Beta)*3.125E-4 + (Betadot*Betadot)*sin(Beta)*1.75E-4 - (Thetadot*Thetadot)*sin(Alpha)*2.7615E-3 + Alphadot*Betadot*sin(Beta)*3.5E-4 + Betadot*Thetadot*sin(Beta)*3.5E-4)*1.801439850948198E20) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60) + ((cos(Beta*2.0)*4.543259751217974E36 + cos(Alpha)*1.305781530283095E38 - cos(Alpha + Beta*2.0)*8.112963841460668E36 - 1.399373244558452E39)*(cos(Alpha + Theta)*(-2.1672252E-1) + cos(Alpha + Beta + Theta)*2.4525E-2 + cos(Theta)*7.864554375E-1 - (Alphadot*Alphadot)*sin(Alpha + Beta)*3.125E-4 - (Betadot*Betadot)*sin(Alpha + Beta)*3.125E-4 + (Alphadot*Alphadot)*sin(Alpha)*2.7615E-3 + (Betadot*Betadot)*sin(Beta)*1.75E-4 - Alphadot*Betadot*sin(Alpha + Beta)*6.25E-4 - Alphadot*Thetadot*sin(Alpha + Beta)*6.25E-4 - Betadot*Thetadot*sin(Alpha + Beta)*6.25E-4 + Alphadot*Betadot*sin(Beta)*3.5E-4 + Alphadot*Thetadot*sin(Alpha)*5.523E-3 + Betadot*Thetadot*sin(Beta)*3.5E-4)*8.070450532247929E22) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60);
	xddot.betaddot = ((cos(Beta)*2.295431032101512E42 + pow(cos(Alpha), 2.0)*5.068268089629632E42 - cos(Alpha + Beta)*cos(Alpha)*1.147082221987514E42 + pow(cos(Alpha + Beta), 2.0)*6.490371073168535E40 - 1.844402881666282E44)*(u_beta - cos(Alpha + Beta + Theta)*2.4525E-2 - (Thetadot*Thetadot)*sin(Alpha + Beta)*3.125E-4 + (Alphadot*Alphadot)*sin(Beta)*1.75E-4 + (Thetadot*Thetadot)*sin(Beta)*1.75E-4 + Alphadot*Thetadot*sin(Beta)*3.5E-4)*3.602879701896397E19) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60) - ((cos(Alpha + Beta)*1.611415088366918E24 + cos(Alpha)*8.622771990548647E22 - cos(Alpha + Beta)*cos(Beta)*1.008806316530991E22 - cos(Alpha)*cos(Beta)*8.914619657921062E22)*(cos(Alpha + Theta)*(-2.1672252E-1) + cos(Alpha + Beta + Theta)*2.4525E-2 + cos(Theta)*7.864554375E-1 - (Alphadot*Alphadot)*sin(Alpha + Beta)*3.125E-4 - (Betadot*Betadot)*sin(Alpha + Beta)*3.125E-4 + (Alphadot*Alphadot)*sin(Alpha)*2.7615E-3 + (Betadot*Betadot)*sin(Beta)*1.75E-4 - Alphadot*Betadot*sin(Alpha + Beta)*6.25E-4 - Alphadot*Thetadot*sin(Alpha + Beta)*6.25E-4 - Betadot*Thetadot*sin(Alpha + Beta)*6.25E-4 + Alphadot*Betadot*sin(Beta)*3.5E-4 + Alphadot*Thetadot*sin(Alpha)*5.523E-3 + Betadot*Thetadot*sin(Beta)*3.5E-4)*1.298074214633707E38) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60) + ((-u_alpha - cos(Alpha + Theta)*2.1672252E-1 + cos(Alpha + Beta + Theta)*2.4525E-2 + (Thetadot*Thetadot)*sin(Alpha + Beta)*3.125E-4 + (Betadot*Betadot)*sin(Beta)*1.75E-4 - (Thetadot*Thetadot)*sin(Alpha)*2.7615E-3 + Alphadot*Betadot*sin(Beta)*3.5E-4 + Betadot*Thetadot*sin(Beta)*3.5E-4)*(cos(Alpha + Beta)*2.322293885282703E41 + cos(Alpha)*1.24267240715314E40 + cos(Beta)*4.590862064203024E40 - cos(Alpha + Beta)*cos(Alpha)*2.294164443975028E40 - cos(Alpha + Beta)*cos(Beta)*1.453843120389752E39 + pow(cos(Alpha + Beta), 2.0)*2.596148429267414E39 - cos(Alpha)*cos(Beta)*1.284732088626016E40 - 4.440565984720187E40)*9.007199254740992E20) / (cos(Alpha*2.0)*1.36466322867013E58 + cos(Beta*2.0)*1.810096145662263E57 + cos(Alpha*2.0 + Beta*2.0)*3.087528119013518E58 - 1.068113514259467E60);

	return xddot;
}

double Impact_MapNMag_fn(RobotState Pre_Impact_State_i, RobotState &Post_Impact_State)
{
	// This function computes the post-impact state and the magnitude of the collision impulse
	// The specific computation is through the assumption of the infinitesimal impact duration and the inelastic collision

	double a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44, b3, b4;
	double Theta = Pre_Impact_State_i.theta;
	double Alpha = Pre_Impact_State_i.alpha;
	double Beta = Pre_Impact_State_i.beta;

	double Thetadot = Pre_Impact_State_i.thetadot;
	double Alphadot = Pre_Impact_State_i.alphadot;
	double Betadot = Pre_Impact_State_i.betadot;

	a11 = (cos(Alpha*2.0)*8.208449320450833E64 + cos(Beta*2.0)*3.945506500226124E64 + cos(Alpha*2.0 + Beta*2.0)*1.857148163586631E65 + cos(Theta*2.0)*3.334921259823581E67 - cos(Alpha*2.0 + Theta*2.0)*1.337577392907485E64 - cos(Beta*2.0 - Theta*2.0)*1.519827262942275E64 - cos(Beta*2.0 + Theta*2.0)*1.519827262942275E64 - cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*3.026246860907338E64 - 3.871004911440996E67) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a12 = (sin(Theta*2.0)*3.334921259823581E67 - sin(Alpha*2.0 + Theta*2.0)*1.337577392907485E64 + sin(Beta*2.0 - Theta*2.0)*1.519827262942275E64 - sin(Beta*2.0 + Theta*2.0)*1.519827262942275E64 - sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*3.026246860907338E64) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a13 = -(cos(Alpha*2.0)*9.740921683647251E63 + cos(Beta*2.0)*2.002683364567391E64 + cos(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + cos(Theta*2.0)*7.605665789283518E65 + cos(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + cos(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66 + 4.863223740202414E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a14 = -(sin(Alpha*2.0)*9.740921683647251E63 + sin(Beta*2.0)*2.002683364567391E64 + sin(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + sin(Theta*2.0)*7.605665789283518E65 + sin(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + sin(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a21 = (sin(Theta*2.0)*3.334921259823581E67 - sin(Alpha*2.0 + Theta*2.0)*1.337577392907485E64 + sin(Beta*2.0 - Theta*2.0)*1.519827262942275E64 - sin(Beta*2.0 + Theta*2.0)*1.519827262942275E64 - sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*3.026246860907338E64) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a22 = (cos(Alpha*2.0)*8.208449320450833E64 + cos(Beta*2.0)*3.945506500226124E64 + cos(Alpha*2.0 + Beta*2.0)*1.857148163586631E65 - cos(Theta*2.0)*3.334921259823581E67 + cos(Alpha*2.0 + Theta*2.0)*1.337577392907485E64 + cos(Beta*2.0 - Theta*2.0)*1.519827262942275E64 + cos(Beta*2.0 + Theta*2.0)*1.519827262942275E64 + cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*3.026246860907338E64 - 3.871004911440996E67) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a23 = -(sin(Alpha*2.0)*-9.740921683647251E63 - sin(Beta*2.0)*2.002683364567391E64 - sin(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + sin(Theta*2.0)*7.605665789283518E65 + sin(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + sin(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a24 = -(cos(Alpha*2.0)*9.740921683647251E63 + cos(Beta*2.0)*2.002683364567391E64 + cos(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 - cos(Theta*2.0)*7.605665789283518E65 - cos(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 - cos(Beta*2.0 + Theta*2.0)*3.262128310305837E64 - cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66 + 4.863223740202414E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a31 = -(cos(Alpha*2.0)*9.740921683647251E63 + cos(Beta*2.0)*2.002683364567391E64 + cos(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + cos(Theta*2.0)*7.605665789283518E65 + cos(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + cos(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66 + 4.863223740202414E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a32 = -(sin(Alpha*2.0)*-9.740921683647251E63 - sin(Beta*2.0)*2.002683364567391E64 - sin(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + sin(Theta*2.0)*7.605665789283518E65 + sin(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + sin(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a33 = -(cos(Alpha*2.0)*-1.556798328444259E65 - cos(Beta*2.0)*1.398273107593654E65 - cos(Alpha*2.0 + Beta*2.0)*4.468298481589435E65 + cos(Theta*2.0)*1.442888051346588E65 + cos(Alpha*2.0 + Theta*2.0)*4.515256909937839E64 + cos(Beta*2.0 + Theta*2.0)*7.001770117149815E64 - cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.047271225342149E68 + cos(Alpha*4.0 + Beta*2.0 + Theta*2.0)*7.001770117149815E64 + 1.102675996788063E68) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a34 = -(sin(Theta*2.0)*1.442888051346588E65 + sin(Alpha*2.0 + Theta*2.0)*4.515256909937839E64 + sin(Beta*2.0 + Theta*2.0)*7.001770117149815E64 - sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.047271225342149E68 + sin(Alpha*4.0 + Beta*2.0 + Theta*2.0)*7.001770117149815E64) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a41 = -(sin(Alpha*2.0)*9.740921683647251E63 + sin(Beta*2.0)*2.002683364567391E64 + sin(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 + sin(Theta*2.0)*7.605665789283518E65 + sin(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 + sin(Beta*2.0 + Theta*2.0)*3.262128310305837E64 + sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a42 = -(cos(Alpha*2.0)*9.740921683647251E63 + cos(Beta*2.0)*2.002683364567391E64 + cos(Alpha*2.0 + Beta*2.0)*2.321927824356299E66 - cos(Theta*2.0)*7.605665789283518E65 - cos(Alpha*2.0 + Theta*2.0)*5.98013933105077E63 - cos(Beta*2.0 + Theta*2.0)*3.262128310305837E64 - cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.490430974337389E66 + 4.863223740202414E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a43 = -(sin(Theta*2.0)*1.442888051346588E65 + sin(Alpha*2.0 + Theta*2.0)*4.515256909937839E64 + sin(Beta*2.0 + Theta*2.0)*7.001770117149815E64 - sin(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.047271225342149E68 + sin(Alpha*4.0 + Beta*2.0 + Theta*2.0)*7.001770117149815E64) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	a44 = (cos(Alpha*2.0)*1.556798328444259E65 + cos(Beta*2.0)*1.398273107593654E65 + cos(Alpha*2.0 + Beta*2.0)*4.468298481589435E65 + cos(Theta*2.0)*1.442888051346588E65 + cos(Alpha*2.0 + Theta*2.0)*4.515256909937839E64 + cos(Beta*2.0 + Theta*2.0)*7.001770117149815E64 - cos(Alpha*2.0 + Beta*2.0 + Theta*2.0)*1.047271225342149E68 + cos(Alpha*4.0 + Beta*2.0 + Theta*2.0)*7.001770117149815E64 - 1.102675996788063E68) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);

	b3 = Thetadot*(sin(Alpha + Theta)*(-7.0 / 1.0E2) + sin(Alpha + Beta + Theta)*(1.0 / 1.0E1) + sin(Theta)*(1.0 / 8.0)) + Betadot*sin(Alpha + Beta + Theta)*(1.0 / 1.0E1) - Alphadot*(sin(Alpha + Theta)*(7.0 / 1.0E2) - sin(Alpha + Beta + Theta)*(1.0 / 1.0E1));
	b4 = Betadot*cos(Alpha + Beta + Theta)*(-1.0 / 1.0E1) + Alphadot*(cos(Alpha + Theta)*(7.0 / 1.0E2) - cos(Alpha + Beta + Theta)*(1.0 / 1.0E1)) - Thetadot*(cos(Alpha + Theta)*(-7.0 / 1.0E2) + cos(Alpha + Beta + Theta)*(1.0 / 1.0E1) + cos(Theta)*(1.0 / 8.0));

	double Impulse_Ax = -(a12*a23*a34*b4 - a12*a24*a33*b4 - a13*a22*a34*b4 + a13*a24*a32*b4 + a14*a22*a33*b4 - a14*a23*a32*b4 - a12*a23*a44*b3 + a12*a24*a43*b3 + a13*a22*a44*b3 - a13*a24*a42*b3 - a14*a22*a43*b3 + a14*a23*a42*b3) / (a11*a22*a33*a44 - a11*a22*a34*a43 - a11*a23*a32*a44 + a11*a23*a34*a42 + a11*a24*a32*a43 - a11*a24*a33*a42 - a12*a21*a33*a44 + a12*a21*a34*a43 + a12*a23*a31*a44 - a12*a23*a34*a41 - a12*a24*a31*a43 + a12*a24*a33*a41 + a13*a21*a32*a44 - a13*a21*a34*a42 - a13*a22*a31*a44 + a13*a22*a34*a41 + a13*a24*a31*a42 - a13*a24*a32*a41 - a14*a21*a32*a43 + a14*a21*a33*a42 + a14*a22*a31*a43 - a14*a22*a33*a41 - a14*a23*a31*a42 + a14*a23*a32*a41);
	double Impulse_Ay = (a11*a23*a34*b4 - a11*a24*a33*b4 - a13*a21*a34*b4 + a13*a24*a31*b4 + a14*a21*a33*b4 - a14*a23*a31*b4 - a11*a23*a44*b3 + a11*a24*a43*b3 + a13*a21*a44*b3 - a13*a24*a41*b3 - a14*a21*a43*b3 + a14*a23*a41*b3) / (a11*a22*a33*a44 - a11*a22*a34*a43 - a11*a23*a32*a44 + a11*a23*a34*a42 + a11*a24*a32*a43 - a11*a24*a33*a42 - a12*a21*a33*a44 + a12*a21*a34*a43 + a12*a23*a31*a44 - a12*a23*a34*a41 - a12*a24*a31*a43 + a12*a24*a33*a41 + a13*a21*a32*a44 - a13*a21*a34*a42 - a13*a22*a31*a44 + a13*a22*a34*a41 + a13*a24*a31*a42 - a13*a24*a32*a41 - a14*a21*a32*a43 + a14*a21*a33*a42 + a14*a22*a31*a43 - a14*a22*a33*a41 - a14*a23*a31*a42 + a14*a23*a32*a41);
	double Impulse_Ex = -(a11*a22*a34*b4 - a11*a24*a32*b4 - a12*a21*a34*b4 + a12*a24*a31*b4 + a14*a21*a32*b4 - a14*a22*a31*b4 - a11*a22*a44*b3 + a11*a24*a42*b3 + a12*a21*a44*b3 - a12*a24*a41*b3 - a14*a21*a42*b3 + a14*a22*a41*b3) / (a11*a22*a33*a44 - a11*a22*a34*a43 - a11*a23*a32*a44 + a11*a23*a34*a42 + a11*a24*a32*a43 - a11*a24*a33*a42 - a12*a21*a33*a44 + a12*a21*a34*a43 + a12*a23*a31*a44 - a12*a23*a34*a41 - a12*a24*a31*a43 + a12*a24*a33*a41 + a13*a21*a32*a44 - a13*a21*a34*a42 - a13*a22*a31*a44 + a13*a22*a34*a41 + a13*a24*a31*a42 - a13*a24*a32*a41 - a14*a21*a32*a43 + a14*a21*a33*a42 + a14*a22*a31*a43 - a14*a22*a33*a41 - a14*a23*a31*a42 + a14*a23*a32*a41);
	double Impulse_Ey = (a11*a22*a33*b4 - a11*a23*a32*b4 - a12*a21*a33*b4 + a12*a23*a31*b4 + a13*a21*a32*b4 - a13*a22*a31*b4 - a11*a22*a43*b3 + a11*a23*a42*b3 + a12*a21*a43*b3 - a12*a23*a41*b3 - a13*a21*a42*b3 + a13*a22*a41*b3) / (a11*a22*a33*a44 - a11*a22*a34*a43 - a11*a23*a32*a44 + a11*a23*a34*a42 + a11*a24*a32*a43 - a11*a24*a33*a42 - a12*a21*a33*a44 + a12*a21*a34*a43 + a12*a23*a31*a44 - a12*a23*a34*a41 - a12*a24*a31*a43 + a12*a24*a33*a41 + a13*a21*a32*a44 - a13*a21*a34*a42 - a13*a22*a31*a44 + a13*a22*a34*a41 + a13*a24*a31*a42 - a13*a24*a32*a41 - a14*a21*a32*a43 + a14*a21*a33*a42 + a14*a22*a31*a43 - a14*a22*a33*a41 - a14*a23*a31*a42 + a14*a23*a32*a41);

	double Impulse_x = Impulse_Ax + Impulse_Ex;
	double Impulse_y = Impulse_Ay + Impulse_Ey;

	double Impulse = sqrt(Impulse_x * Impulse_x + Impulse_y * Impulse_y);

	double f11 = Impulse_Ax;
	double f21 = Impulse_Ay;
	double f31 = Impulse_Ex;
	double f41 = Impulse_Ey;

	double thetadot_offset = -(f21*cos(Alpha*2.0 + Beta*2.0 + Theta)*1.485718530869305E66 - f41*cos(Alpha*2.0 + Beta*2.0 + Theta)*4.082186071436875E67 - f11*sin(Alpha*2.0 + Beta*2.0 + Theta)*1.485718530869305E66 + f31*sin(Alpha*2.0 + Beta*2.0 + Theta)*4.082186071436875E67 - f21*cos(Theta)*5.858173057226452E68 + f41*cos(Theta)*1.346386187058565E67 + f21*cos(Alpha*2.0 + Theta)*6.566759456360667E65 - f41*cos(Alpha*2.0 + Theta)*1.84633451553374E65 + f21*cos(Beta*2.0 + Theta)*2.880743346833702E65 + f41*cos(Beta*2.0 + Theta)*6.183172690453526E65 + f11*sin(Theta)*5.858173057226452E68 - f31*sin(Theta)*1.346386187058565E67 - f11*sin(Alpha*2.0 + Theta)*6.566759456360667E65 + f31*sin(Alpha*2.0 + Theta)*1.84633451553374E65 - f11*sin(Beta*2.0 + Theta)*2.880743346833702E65 - f31*sin(Beta*2.0 + Theta)*6.183172690453526E65 + f21*cos(Beta*2.0 - Theta)*2.880743346833702E65 + f11*sin(Beta*2.0 - Theta)*2.880743346833702E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	double alphadot_offset = -(f21*cos(Alpha + Theta)*1.582752349523542E66 - f41*cos(Alpha + Theta)*1.208023323812598E66 + f21*cos(Alpha + Beta*2.0 - Theta)*8.018209395108242E64 - f21*cos(Alpha*2.0 + Beta*2.0 + Theta)*1.485718530869305E66 + f41*cos(Alpha*2.0 + Beta*2.0 + Theta)*4.082186071436875E67 - f41*cos(Alpha*3.0 + Beta*2.0 + Theta)*1.721013203507476E65 - f11*sin(Alpha + Theta)*1.582752349523542E66 + f31*sin(Alpha + Theta)*1.208023323812598E66 + f11*sin(Alpha + Beta*2.0 - Theta)*8.018209395108242E64 + f11*sin(Alpha*2.0 + Beta*2.0 + Theta)*1.485718530869305E66 - f31*sin(Alpha*2.0 + Beta*2.0 + Theta)*4.082186071436875E67 + f31*sin(Alpha*3.0 + Beta*2.0 + Theta)*1.721013203507476E65 + f21*cos(Theta)*5.858173057226452E68 - f41*cos(Theta)*1.346386187058565E67 - f21*cos(Alpha - Theta)*2.463166419349934E66 - f21*cos(Alpha*2.0 + Theta)*6.566759456360667E65 + f41*cos(Alpha - Theta)*5.139054395538929E64 + f41*cos(Alpha*2.0 + Theta)*1.84633451553374E65 - f21*cos(Beta*2.0 + Theta)*2.880743346833702E65 - f41*cos(Beta*2.0 + Theta)*6.183172690453526E65 - f11*sin(Theta)*5.858173057226452E68 + f31*sin(Theta)*1.346386187058565E67 - f11*sin(Alpha - Theta)*2.463166419349934E66 + f11*sin(Alpha*2.0 + Theta)*6.566759456360667E65 + f31*sin(Alpha - Theta)*5.139054395538929E64 - f31*sin(Alpha*2.0 + Theta)*1.84633451553374E65 + f11*sin(Beta*2.0 + Theta)*2.880743346833702E65 + f31*sin(Beta*2.0 + Theta)*6.183172690453526E65 - f21*cos(Alpha + Beta*2.0 + Theta)*4.922533095485672E64 + f41*cos(Alpha + Beta*2.0 + Theta)*3.673866238305461E66 + f11*sin(Alpha + Beta*2.0 + Theta)*4.922533095485672E64 - f31*sin(Alpha + Beta*2.0 + Theta)*3.673866238305461E66 - f21*cos(Beta*2.0 - Theta)*2.880743346833702E65 - f11*sin(Beta*2.0 - Theta)*2.880743346833702E65) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);
	double betadot_offset = (f21*cos(Alpha + Theta)*1.582752349523542E66 - f41*cos(Alpha + Theta)*1.208023323812598E66 + f21*cos(Alpha + Beta*2.0 - Theta)*8.018209395108242E64 - f41*cos(Alpha*3.0 + Beta*2.0 + Theta)*1.721013203507476E65 - f11*sin(Alpha + Theta)*1.582752349523542E66 + f31*sin(Alpha + Theta)*1.208023323812598E66 + f11*sin(Alpha + Beta*2.0 - Theta)*8.018209395108242E64 + f31*sin(Alpha*3.0 + Beta*2.0 + Theta)*1.721013203507476E65 + f21*cos(Alpha + Beta + Theta)*3.109497600982133E67 - f41*cos(Alpha + Beta + Theta)*2.17795010243082E69 - f11*sin(Alpha + Beta + Theta)*3.109497600982133E67 + f31*sin(Alpha + Beta + Theta)*2.17795010243082E69 - f21*cos(Alpha - Theta)*2.463166419349934E66 + f41*cos(Alpha - Theta)*5.139054395538929E64 - f11*sin(Alpha - Theta)*2.463166419349934E66 + f31*sin(Alpha - Theta)*5.139054395538929E64 - f21*cos(Alpha + Beta - Theta)*4.835183211647836E67 - f21*cos(Alpha - Beta + Theta)*4.349944045818778E65 + f21*cos(-Alpha + Beta + Theta)*7.085531278269251E65 - f21*cos(Alpha + Beta*2.0 + Theta)*4.922533095485672E64 + f41*cos(Alpha + Beta - Theta)*4.468298481589435E66 + f41*cos(Alpha - Beta + Theta)*1.398273107593654E66 + f41*cos(-Alpha + Beta + Theta)*1.520824947675486E66 + f41*cos(Alpha + Beta*2.0 + Theta)*3.673866238305461E66 + f41*cos(Alpha*3.0 + Beta + Theta)*1.520824947675486E66 - f11*sin(Alpha + Beta - Theta)*4.835183211647836E67 + f11*sin(Alpha - Beta + Theta)*4.349944045818778E65 - f11*sin(-Alpha + Beta + Theta)*7.085531278269251E65 + f11*sin(Alpha + Beta*2.0 + Theta)*4.922533095485672E64 + f31*sin(Alpha + Beta - Theta)*4.468298481589435E66 - f31*sin(Alpha - Beta + Theta)*1.398273107593654E66 - f31*sin(-Alpha + Beta + Theta)*1.520824947675486E66 - f31*sin(Alpha + Beta*2.0 + Theta)*3.673866238305461E66 - f31*sin(Alpha*3.0 + Beta + Theta)*1.520824947675486E66) / (cos(Alpha*2.0)*4.937382266251176E63 + cos(Beta*2.0)*3.495682768984134E63 + cos(Alpha*2.0 + Beta*2.0)*1.117074620397359E64 - 3.616627087217315E66);

	Post_Impact_State.theta = Theta;
	Post_Impact_State.alpha = Alpha;
	Post_Impact_State.beta = Beta;
	Post_Impact_State.thetadot = Thetadot + thetadot_offset;
	Post_Impact_State.alphadot = Alphadot + alphadot_offset;
	Post_Impact_State.betadot = Betadot + betadot_offset;

	return Impulse;
}

std::vector<double> End_Link_Pos_Fn(RobotState robot_state_i)
{
	// This function is used to give the positions of the end link of the robot
	// In our case, the end link is the robot hand link which marks as linkCD

	double Theta = robot_state_i.theta;
	double Alpha = robot_state_i.alpha;
	double Beta = robot_state_i.beta;

	double rCx = cos(Alpha + Theta)*(-7.0 / 1.0E2) + cos(Theta)*(1.0 / 8.0);
	double rCy = sin(Alpha + Theta)*(-7.0 / 1.0E2) + sin(Theta)*(1.0 / 8.0);
	double rDx = cos(Alpha + Theta)*(-7.0 / 1.0E2) + cos(Alpha + Beta + Theta)*(1.0 / 1.0E1) + cos(Theta)*(1.0 / 8.0);
	double rDy = sin(Alpha + Theta)*(-7.0 / 1.0E2) + sin(Alpha + Beta + Theta)*(1.0 / 1.0E1) + sin(Theta)*(1.0 / 8.0);

	std::vector<double> End_Link_Pos_Vec;
	End_Link_Pos_Vec.push_back(rCx);
	End_Link_Pos_Vec.push_back(rCy);
	End_Link_Pos_Vec.push_back(rDx);
	End_Link_Pos_Vec.push_back(rDy);

	return End_Link_Pos_Vec;
}
